<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>Tarboush Runner - Enhanced</title>
  <style>
    html, body {
      margin: 0; padding: 0; overflow: hidden;
      background: linear-gradient(to bottom, #009639 33%, #ffffff 66%, #000000);
      font-family: Arial, sans-serif;
    }
    canvas { display: block; margin: auto; background: #d2b48c; border: 3px solid #444; border-radius: 10px; }
    #ui { position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; }
    #score { position: absolute; top: 15px; right: 20px; background: #fff; color: #111; padding: 10px 20px; font-weight: bold; border-radius: 25px; font-size: 18px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); }
    #powerUp { position: absolute; top: 60px; right: 20px; background: #FFD700; color: #111; padding: 8px 15px; font-weight: bold; border-radius: 20px; font-size: 14px; display: none; animation: pulse 1s infinite; }
    @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }
    #instructions { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); background: rgba(255,255,255,0.9); color: #333; padding: 10px 20px; border-radius: 20px; font-weight: bold; pointer-events: auto; }
    #gameOver { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.9); color: white; padding: 30px; border-radius: 15px; text-align: center; display: none; pointer-events: auto; }
    #restartBtn { padding: 12px 25px; font-size: 16px; background: #009639; color: white; border: none; border-radius: 20px; cursor: pointer; margin-top: 15px; }
    .control-hint { font-size: 12px; margin-top: 5px; opacity: 0.8; }
  </style>
</head>
<body>
  <div id="ui">
    <div id="score">Score: 0</div>
    <div id="powerUp">üõ°Ô∏è Shield Active!</div>
    <div id="instructions">
      SPACE/TAP: Jump | DOWN/SWIPE DOWN: Duck
      <div class="control-hint">Avoid rocks, jump over cacti, duck under birds!</div>
    </div>
    <div id="gameOver">
      <h2>Game Over!</h2>
      <p>Final Score: <span id="finalScore">0</span></p>
      <p>Best Score: <span id="bestScore">0</span></p>
      <button id="restartBtn">Play Again</button>
    </div>
  </div>
  <canvas id="gameCanvas" width="800" height="400"></canvas>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    let score = 0;
    let bestScore = localStorage.getItem('tarboushBestScore') || 0;
    let gameRunning = true;
    let gameSpeed = 4;
    const ground = 340;
    const gravity = 0.6;

    let player = {
      x: 100, y: ground, width: 40, height: 60,
      vy: 0, jumping: false, ducking: false, onGround: true,
      duckTimer: 0, invulnerable: false, invulnerableTimer: 0
    };

    let obstacles = [], powerUps = [], particles = [], clouds = [];
    let obstacleTimer = 0, powerUpTimer = 0;

    const OBSTACLE_TYPES = {
      ROCK: { width: 30, height: 30, color: '#8B4513' },
      CACTUS: { width: 25, height: 50, color: '#228B22' },
      BIRD: { width: 35, height: 20, color: '#8B4513', flying: true },
      PALM: { width: 30, height: 80, color: '#228B22' }
    };

    const POWERUP_TYPES = {
      SHIELD: { color: '#FFD700', duration: 5000, effect: 'invulnerable' },
      MAGNET: { color: '#FF69B4', duration: 3000, effect: 'magnet' },
      JUMP: { color: '#00BFFF', duration: 4000, effect: 'superjump' }
    };

    function initGame() {
      document.getElementById('bestScore').textContent = bestScore;
      initClouds();
      gameLoop();
    }

    function initClouds() {
      clouds = [];
      for (let i = 0; i < 4; i++) {
        clouds.push({
          x: Math.random() * canvas.width,
          y: 30 + Math.random() * 80,
          speed: 0.3 + Math.random() * 0.4,
          size: 15 + Math.random() * 10
        });
      }
    }
function drawPlayer() {
      const px = player.x;
      let py = player.y;
      
      if (player.ducking) { py += 20; }
      if (player.invulnerable && Math.floor(Date.now() / 100) % 2) { ctx.globalAlpha = 0.5; }

      // Tarboush
      if (player.jumping && !player.ducking) {
        ctx.fillStyle = "#009639";
        ctx.fillRect(px + 28, py + 15, 12, 8);
        ctx.beginPath();
        ctx.arc(px + 34, py + 23, 7, 0, Math.PI);
        ctx.fill();
      } else {
        ctx.fillStyle = "#009639";
        ctx.fillRect(px + 10, py - 2, 20, 10);
        ctx.beginPath();
        ctx.arc(px + 20, py + 8, 10, 0, Math.PI);
        ctx.fill();
      }

      // Head
      ctx.fillStyle = "#f2c6b4";
      ctx.beginPath();
      ctx.arc(px + 20, py + (player.ducking ? 15 : 10), 10, 0, Math.PI * 2);
      ctx.fill();

      // Eyes
      ctx.fillStyle = "#000";
      ctx.beginPath();
      const eyeY = py + (player.ducking ? 12 : 9);
      ctx.arc(px + 16, eyeY, 1.5, 0, Math.PI * 2);
      ctx.arc(px + 24, eyeY, 1.5, 0, Math.PI * 2);
      ctx.fill();

      // Body
      ctx.fillStyle = "#ffffff";
      const bodyHeight = player.ducking ? 20 : 40;
      ctx.fillRect(px + 8, py + (player.ducking ? 25 : 20), 24, bodyHeight);

      // Red stars
      ctx.fillStyle = "#d21f3c";
      const stars = player.ducking ? 2 : 3;
      for (let i = 0; i < stars; i++) {
        ctx.beginPath();
        ctx.arc(px + 20, py + (player.ducking ? 30 : 30) + i * 8, 3, 0, Math.PI * 2);
        ctx.fill();
      }

      ctx.globalAlpha = 1.0;
    }

    function drawObstacle(obs) {
      switch(obs.type) {
        case 'ROCK':
          ctx.fillStyle = '#8B4513';
          ctx.beginPath();
          ctx.ellipse(obs.x + 15, obs.y + 15, 15, 12, 0, 0, Math.PI * 2);
          ctx.fill();
          break;
        case 'CACTUS':
          ctx.fillStyle = '#228B22';
          ctx.fillRect(obs.x + 10, obs.y, 10, obs.height);
          ctx.fillRect(obs.x, obs.y + 15, 10, 10);
          ctx.fillRect(obs.x + 20, obs.y + 20, 10, 10);
          break;
        case 'BIRD':
          ctx.fillStyle = '#8B4513';
          ctx.beginPath();
          ctx.ellipse(obs.x + 17, obs.y + 10, 12, 6, 0, 0, Math.PI * 2);
          ctx.fill();
          break;
        case 'PALM':
          ctx.fillStyle = '#8B4513';
          ctx.fillRect(obs.x + 12, obs.y + 20, 8, 60);
          ctx.fillStyle = '#228B22';
          for (let i = 0; i < 6; i++) {
            const angle = (i * Math.PI * 2) / 6;
            ctx.save();
            ctx.translate(obs.x + 16 + Math.cos(angle) * 12, obs.y + 25 + Math.sin(angle) * 12);
            ctx.rotate(angle);
            ctx.fillRect(-2, -12, 4, 24);
            ctx.restore();
          }
          break;
      }
    }
function update() {
      if (!gameRunning) return;

      player.vy += gravity;
      player.y += player.vy;

      if (player.ducking) {
        player.duckTimer--;
        if (player.duckTimer <= 0) player.ducking = false;
      }

      if (player.y >= ground) {
        player.y = ground;
        player.vy = 0;
        player.jumping = false;
        player.onGround = true;
      } else {
        player.onGround = false;
      }

      // Spawn obstacles
      obstacleTimer++;
      if (obstacleTimer > Math.max(80 - score * 0.5, 40)) {
        const types = Object.keys(OBSTACLE_TYPES);
        const type = types[Math.floor(Math.random() * types.length)];
        const obstacleData = OBSTACLE_TYPES[type];
        
        let y = ground + 60 - obstacleData.height;
        if (type === 'BIRD') y = ground - 40;
        
        obstacles.push({
          x: canvas.width, y, type,
          width: obstacleData.width,
          height: obstacleData.height
        });
        obstacleTimer = 0;
      }

      // Update obstacles
      for (let i = obstacles.length - 1; i >= 0; i--) {
        obstacles[i].x -= gameSpeed;

        if (!player.invulnerable) {
          let playerHeight = player.ducking ? 40 : player.height;
          let playerY = player.ducking ? player.y + 20 : player.y;
          
          if (player.x + player.width > obstacles[i].x &&
              player.x < obstacles[i].x + obstacles[i].width &&
              playerY + playerHeight > obstacles[i].y &&
              playerY < obstacles[i].y + obstacles[i].height) {
            gameOver();
            return;
          }
        }

        if (obstacles[i].x < -50) {
          obstacles.splice(i, 1);
          score += 10;
          document.getElementById('score').textContent = `Score: ${score}`;
        }
      }
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#b8860b";
      ctx.fillRect(0, ground + 60, canvas.width, 100);
      drawPlayer();
      obstacles.forEach(drawObstacle);
    }

    function gameLoop() {
      update();
      draw();
      if (gameRunning) requestAnimationFrame(gameLoop);
    }

    function jump() {
      if (gameRunning && player.onGround && !player.ducking) {
        player.vy = -13;
        player.jumping = true;
        player.onGround = false;
      }
    }

    function duck() {
      if (gameRunning && player.onGround && !player.jumping) {
        player.ducking = true;
        player.duckTimer = 20;
      }
    }

    function gameOver() {
      gameRunning = false;
      document.getElementById("finalScore").textContent = score;
      document.getElementById("gameOver").style.display = "block";
    }

    function restart() {
      gameRunning = true;
      score = 0;
      gameSpeed = 4;
      player.y = ground;
      player.vy = 0;
      player.jumping = false;
      player.ducking = false;
      player.onGround = true;
      obstacles = [];
      obstacleTimer = 0;
      document.getElementById('score').textContent = 'Score: 0';
      document.getElementById("gameOver").style.display = "none";
      gameLoop();
    }

    // Event listeners
    document.addEventListener("keydown", (e) => {
      if (!gameRunning) return;
      if (e.code === "Space" || e.key === "ArrowUp") {
        e.preventDefault();
        jump();
      } else if (e.key === "ArrowDown") {
        e.preventDefault();
        duck();
      }
    });

    canvas.addEventListener("click", jump);
    document.getElementById("restartBtn").addEventListener("click", restart);

    initGame();
  </script>
</body>
</html>
